<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    
    <!-- Component name of the service providing network location support. -->
    <string name="config_networkLocationProviderPackageName" translatable="false">com.google.android.location</string>
    <!-- Component name of the service providing geocoder API support. -->
    <string name="config_geocodeProviderPackageName" translatable="false">com.google.android.location</string>

    <!-- If true, the screen can be rotated via the accelerometer in all 4
         rotations as the default behavior. -->
    <bool name="config_allowAllRotations">true</bool>

    <!-- Flag indicating whether we should enable the automatic brightness in Settings.
         config_hardware_automatic_brightness_available is not set, so we will use software implementation -->
	<bool name="config_automatic_brightness_available">false</bool>

    <!-- Flag indicating whether the current device is "voice capable".
         If true, this means that the device supports circuit-switched
         (i.e. voice) phone calls over the telephony network, and is
         allowed to display the in-call UI while a cellular voice call is
         active.  This can be overridden to false for "data only" devices
         which can't make voice calls and don't support any in-call UI.

         Note: this flag is subtly different from the
         PackageManager.FEATURE_TELEPHONY system feature, which is
         available on *any* device with a telephony radio, even if the
         device is data-only. -->
    <bool name="config_voice_capable">false</bool>

    <!-- Flag indicating whether the current device allows sms service.
         If true, this means that the device supports both sending and
         receiving sms via the telephony network.
         This can be overridden to false for "data only" devices
         which can't send and receive sms message.

         Note: Disable SMS also disable voicemail waiting sms,
               cell broadcasting sms, and MMS. -->
    <bool name="config_sms_capable">false</bool>

    <!-- True will enable the electron beam screen-off animation. -->
    <bool name="config_screenOffAnimation">true</bool>

<!-- Hardware 'face' keys present on the device, stored as a bit field.
	         This integer should equal the sum of the corresponding value for each
	         of the following keys present:
	             1 - Home
	             2 - Back
	             4 - Menu
	             8 - Search
	            16 - App switch
	         For example, a device with Home, Back and Menu keys would set this
	         config to 7. -->
	    <!-- integer name="config_deviceHardwareKeys">2</integer -->
  
    <bool name="config_showNavigationBar">true</bool>

    <bool name="config_enableWifiDisplay">true</bool>
                
        <!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
    
        <!-- Screen brightness used to dim the screen when the user activity
         timeout expires.  May be less than the minimum allowed brightness setting
         that can be set by the user. -->
                  
      <!-- XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. -->

    <!-- This string array should be overridden by the device to present a
         list of network attributes. This is used by the connectivity manager
         to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager connection type],
         [associated radio-type],[priority],[restoral-timer(ms)],
         [dependencyMet] -->
    <!-- the 5th element "resore-time" indicates the number of milliseconds
         to delay before automatically restore the default connection.
         Set -1 if the connection does not require auto-restore. -->
    <!-- the 6th element indicates boot-time dependency-met value. -->
    <bool translatable="false" name="config_wifi_background_scan_support">false</bool>
    
    <bool translatable="false" name="config_wifi_p2p_support">true</bool>

    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1,-1,true"</item>
        <item>"wifi_p2p,13,1,0,-1,true"</item>
    </string-array>

    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
        <item>"13,1"</item>
    </string-array>
    
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan0"</item>
    </string-array>

    <integer-array translatable="false" name="config_tether_upstream_types">
        <item>1</item>
        <!-- <item>4</item> -->
    </integer-array>

    <integer-array translatable="false" name="config_tether_upstream_regexs">
        <item>"wlan\\d"</item>
    </integer-array>
    <!-- This string array should be overridden by the device to present a
         list of radio attributes. This is used by the connectivity manager
         to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType],
         [# simultaneous connection types]" -->

    <bool name="config_gsensorCalibrationAppLinks">false</bool>

        <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. -->
    <bool name="config_useDevInputEventForAudioJack">true</bool>

        <!-- Hardware 'face' keys present on the device, stored as a bit field.
         This integer should equal the sum of the corresponding value for each
         of the following keys present:
             1 - Home
             2 - Back
             4 - Menu
             8 - Assistant (search)
            16 - App switch
         For example, a device with Home, Back and Menu keys would set this
         config to 7. -->
    <integer name="config_deviceHardwareKeys">0</integer>

  </resources>